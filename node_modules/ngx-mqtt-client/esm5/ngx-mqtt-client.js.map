{
  "version": 3,
  "file": "ngx-mqtt-client.js",
  "sources": [
    "ng://ngx-mqtt-client/out/app/ngx-mqtt-client/ngx-mqtt-client.module.ts",
    "ng://ngx-mqtt-client/out/app/ngx-mqtt-client/services/mqtt.service.ts",
    "ng://ngx-mqtt-client/out/app/ngx-mqtt-client/tokens/mqtt-mock.injection-token.ts",
    "ng://ngx-mqtt-client/out/app/ngx-mqtt-client/models/subscription-grant.ts",
    "ng://ngx-mqtt-client/out/app/ngx-mqtt-client/tokens/mqtt-config.injection-token.ts"
  ],
  "sourcesContent": [
    "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MqttService} from './services/mqtt.service';\nimport {MQTT_CONFIG} from './tokens/mqtt-config.injection-token';\nimport {IClientOptions} from 'mqtt';\n\n@NgModule({\n    providers: [MqttService]\n})\nexport class NgxMqttClientModule {\n    static withOptions(config: IClientOptions): ModuleWithProviders {\n        return {\n            ngModule: NgxMqttClientModule,\n            providers: [\n                {provide: MQTT_CONFIG, useValue: config}\n            ]\n        };\n    }\n}\n",
    "import {Inject, Injectable, Optional} from '@angular/core';\nimport * as mqtt from 'mqtt';\nimport {IClientOptions, IClientPublishOptions, IClientSubscribeOptions, ISubscriptionGrant, MqttClient} from 'mqtt';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MQTT_CONFIG} from '../tokens/mqtt-config.injection-token';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {distinctUntilChanged, switchMap} from 'rxjs/operators';\nimport {of} from 'rxjs/observable/of';\nimport {SubscriptionGrant} from '../models/subscription-grant';\nimport {TopicStore} from '../models/topic-store';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {ConnectionStatus} from '../models/connection-status';\nimport 'rxjs/add/observable/throw';\nimport {ErrorObservable} from 'rxjs/observable/ErrorObservable';\nimport {concat} from 'rxjs/observable/concat';\nimport {MQTT_MOCK} from '../tokens/mqtt-mock.injection-token';\nimport {MqttConfig} from '../models/mqtt-config';\n\n@Injectable()\nexport class MqttService {\n\n    private _client: MqttClient;\n\n    private _status: BehaviorSubject<ConnectionStatus> = new BehaviorSubject<ConnectionStatus>(ConnectionStatus.CONNECTED);\n\n    private _store: { [topic: string]: TopicStore<any> } = {};\n\n    constructor(@Inject(MQTT_CONFIG) config: MqttConfig,\n                @Optional() @Inject(MQTT_MOCK) private _mqttMock) {\n\n        if (!config.manageConnectionManually) {\n            this.connect(config);\n        }\n    }\n\n    connect(config: IClientOptions): void {\n        if (this._client && this._client.connected) {\n            this._client.end(true);\n        }\n\n        this._client = this._mqttMock ? this._mqttMock.connect(null, config) : mqtt.connect(null, config);\n        this._client.on('message', (topic, message) => this.updateTopic(topic, message.toString()));\n        this._client.on('offline', () => this._status.next(ConnectionStatus.DISCONNECTED));\n        this._client.on('connect', () => this._status.next(ConnectionStatus.CONNECTED));\n    }\n\n    subscribeTo<T>(topic: string, options?: IClientSubscribeOptions): Observable<(SubscriptionGrant | T)> {\n        return this._status.pipe(\n            switchMap(status => {\n                if (status === ConnectionStatus.DISCONNECTED) {\n                    return this.throwError();\n                }\n\n                if (this._store[topic]) {\n                    const grant = this._store[topic].grant;\n                    const stream = this._store[topic].stream;\n                    stream.observers.forEach(obs => obs.complete());\n                    return concat(of(grant), stream);\n                }\n\n                return fromPromise(new Promise((resolve, reject) => {\n                    this._client.subscribe(topic, options, (error: Error, granted: Array<ISubscriptionGrant>) => {\n                        if (error) {\n                            reject(error);\n                        } else {\n                            // https://github.com/mqttjs/MQTT.js/issues/529\n                            // workaround until they fix this issue\n                            const qos = options ? options.qos : 0;\n                            const grantedWorkaround = granted.length > 0 ? new SubscriptionGrant(granted[0]) : new SubscriptionGrant({\n                                topic,\n                                qos\n                            });\n                            resolve(grantedWorkaround);\n                        }\n                    });\n                })).pipe(\n                    switchMap((granted: SubscriptionGrant) =>\n                        concat(\n                            of(granted),\n                            this.addTopic<T>(topic, granted)\n                        )\n                    )\n                );\n            })\n        );\n    }\n\n    unsubscribeFrom(topic: string | Array<string>): Observable<any> {\n        if (Array.isArray(topic)) {\n            topic.forEach(t => {\n                this.removeTopic(t);\n            });\n        } else {\n            this.removeTopic(topic);\n        }\n\n        return fromPromise(new Promise((resolve, reject) => {\n            this._client.unsubscribe(topic, (error: Error) =>\n                error ? reject(error) : resolve()\n            );\n        }));\n    }\n\n    publishTo<T>(topic: string,\n                 message: T,\n                 options?: IClientPublishOptions): Observable<any> {\n        return fromPromise(new Promise((resolve, reject) => {\n            let msg: string | Buffer;\n\n            if (!(message instanceof Buffer)) {\n                switch (typeof message) {\n                    case 'string':\n                    case 'number':\n                    case 'boolean':\n                        msg = message.toString();\n                        break;\n                    case 'object':\n                        msg = JSON.stringify(message);\n                        break;\n                }\n            } else {\n                msg = message;\n            }\n\n            this._client.publish(topic, msg, options, (error: Error) =>\n                error ? reject(error) : resolve()\n            );\n        }));\n    }\n\n    end(force?: boolean, cb?: (...args) => void): void {\n        const topics = Object.keys(this._store);\n        this.unsubscribeFrom(topics);\n        this._status.unsubscribe();\n        this._client.end(force, cb);\n    }\n\n    status(): Observable<ConnectionStatus> {\n        return this._status.pipe(\n            distinctUntilChanged()\n        );\n    }\n\n    private removeTopic(topic: string): void {\n        if (this._store[topic]) {\n            this._store[topic].stream.unsubscribe();\n            const {[topic]: removed, ...newStore} = this._store;\n            this._store = newStore;\n        }\n    }\n\n    private updateTopic(topic: string, message: string): void {\n        let msg: string | object;\n        try {\n            msg = JSON.parse(message);\n        } catch (ex) {\n            msg = message;\n        }\n        this._store[topic].stream.next(msg);\n    }\n\n    private addTopic<T>(topic: string, grant: SubscriptionGrant): Observable<T> {\n        this._store[topic] = {grant, stream: new Subject<T>()};\n        return this._store[topic].stream;\n    }\n\n    private throwError(): ErrorObservable {\n        return Observable.throw(new Error('No connection with MQTT.'));\n    }\n\n}\n",
    "import {InjectionToken} from '@angular/core';\n\nexport const MQTT_MOCK = new InjectionToken('mqtt mock');\n",
    "import {ISubscriptionGrant, QoS} from 'mqtt';\n\nexport class SubscriptionGrant implements ISubscriptionGrant {\n\n    topic: string;\n\n    qos: QoS | number;\n\n    constructor(grant: ISubscriptionGrant) {\n        this.topic = grant.topic;\n        this.qos = grant.qos;\n    }\n\n}\n",
    "import {InjectionToken} from '@angular/core';\nimport {MqttConfig} from '../models/mqtt-config';\n\nexport const MQTT_CONFIG = new InjectionToken<MqttConfig>('mqtt configuration');\n"
  ],
  "names": [
    "tslib_1.__rest",
    "mqtt.connect"
  ],
  "mappings": "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"
}
