import { IClientOptions, IClientPublishOptions, IClientSubscribeOptions } from 'mqtt';
import { Observable } from 'rxjs/Observable';
import { SubscriptionGrant } from '../models/subscription-grant';
import { ConnectionStatus } from '../models/connection-status';
import 'rxjs/add/observable/throw';
import { MqttConfig } from '../models/mqtt-config';
export declare class MqttService {
    private _mqttMock;
    private _client;
    private _status;
    private _store;
    constructor(config: MqttConfig, _mqttMock: any);
    connect(config: IClientOptions): void;
    subscribeTo<T>(topic: string, options?: IClientSubscribeOptions): Observable<(SubscriptionGrant | T)>;
    unsubscribeFrom(topic: string | Array<string>): Observable<any>;
    publishTo<T>(topic: string, message: T, options?: IClientPublishOptions): Observable<any>;
    end(force?: boolean, cb?: (...args) => void): void;
    status(): Observable<ConnectionStatus>;
    private removeTopic(topic);
    private updateTopic(topic, message);
    private addTopic<T>(topic, grant);
    private throwError();
}
